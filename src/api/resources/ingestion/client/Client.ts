/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as InfloatApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as fs from "fs";
import { Blob } from "buffer";

export declare namespace Ingestion {
    interface Options {
        environment?: core.Supplier<environments.InfloatApiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

/**
 * Ingestion endpoints
 */
export class Ingestion {
    constructor(protected readonly _options: Ingestion.Options = {}) {}

    /**
     * Ingest a website
     *
     * @param {InfloatApi.WebsiteIngestionRequest} request
     * @param {Ingestion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ingestion.crawlWebsite({
     *         url: "url",
     *         chatbotId: "chatbot_id"
     *     })
     */
    public async crawlWebsite(
        request: InfloatApi.WebsiteIngestionRequest,
        requestOptions?: Ingestion.RequestOptions
    ): Promise<InfloatApi.WebsiteIngestionResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.InfloatApiEnvironment.Default,
                "api/v1/ingest/website"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.1",
                "User-Agent": "infloat-ts/0.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WebsiteIngestionRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WebsiteIngestionResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Ingest a YouTube video
     *
     * @param {InfloatApi.BodyIngestYoutubeApiV1IngestYoutubePost} request
     * @param {Ingestion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ingestion.ingestYoutube({
     *         url: "url",
     *         chatbotId: "chatbot_id"
     *     })
     */
    public async ingestYoutube(
        request: InfloatApi.BodyIngestYoutubeApiV1IngestYoutubePost,
        requestOptions?: Ingestion.RequestOptions
    ): Promise<InfloatApi.YoutubeTranscript> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.InfloatApiEnvironment.Default,
                "api/v1/ingest/youtube"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.1",
                "User-Agent": "infloat-ts/0.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BodyIngestYoutubeApiV1IngestYoutubePost.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.YoutubeTranscript.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Upload a document
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {InfloatApi.BodyUploadDocumentApiV1IngestDocumentPost} request
     * @param {Ingestion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.ingestion.uploadDocument(fs.createReadStream("/path/to/your/file"), {
     *         chatbotId: "chatbot_id"
     *     })
     */
    public async uploadDocument(
        file: File | fs.ReadStream | Blob,
        request: InfloatApi.BodyUploadDocumentApiV1IngestDocumentPost,
        requestOptions?: Ingestion.RequestOptions
    ): Promise<InfloatApi.FilePathResponse> {
        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        await _request.append("chatbot_id", request.chatbotId);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.InfloatApiEnvironment.Default,
                "api/v1/ingest/document"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.1",
                "User-Agent": "infloat-ts/0.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.FilePathResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
