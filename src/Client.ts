/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import * as InfloatApi from "./api/index";
import * as serializers from "./serialization/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import * as fs from "fs";
import { Blob } from "buffer";

export declare namespace InfloatApiClient {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class InfloatApiClient {
    constructor(protected readonly _options: InfloatApiClient.Options) {}

    /**
     * @param {InfloatApi.UserCreate} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.registerUserAuthRegisterPost({
     *         name: "name",
     *         email: "email",
     *         password: "password"
     *     })
     */
    public async registerUserAuthRegisterPost(
        request: InfloatApi.UserCreate,
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.UserResponse> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "auth/register"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.UserCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.UserResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApi.UserAuth} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.loginAuthLoginPost({
     *         email: "email",
     *         password: "password"
     *     })
     */
    public async loginAuthLoginPost(
        request: InfloatApi.UserAuth,
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.Token> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "auth/login"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.UserAuth.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Token.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApi.GetUserMeAuthMeGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getUserMeAuthMeGet()
     */
    public async getUserMeAuthMeGet(
        request: InfloatApi.GetUserMeAuthMeGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.UserResponse> {
        const { authorization } = request;
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "auth/me"),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.UserResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApi.GetProjectsProjectsGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getProjectsProjectsGet()
     */
    public async getProjectsProjectsGet(
        request: InfloatApi.GetProjectsProjectsGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ProjectResponse[]> {
        const { skip, limit, authorization } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "projects"),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getProjectsProjectsGet.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApi.ProjectCreate} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.createProjectProjectsPost({
     *         name: "name"
     *     })
     */
    public async createProjectProjectsPost(
        request: InfloatApi.ProjectCreate,
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ProjectResponse> {
        const { authorization, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "projects"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ProjectCreate.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ProjectResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} projectId
     * @param {InfloatApi.GetProjectProjectsProjectIdGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getProjectProjectsProjectIdGet("project_id")
     */
    public async getProjectProjectsProjectIdGet(
        projectId: string,
        request: InfloatApi.GetProjectProjectsProjectIdGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ProjectResponse> {
        const { authorization } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ProjectResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} projectId
     * @param {InfloatApi.GetModelsProjectsProjectIdModelsGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getModelsProjectsProjectIdModelsGet("project_id")
     */
    public async getModelsProjectsProjectIdModelsGet(
        projectId: string,
        request: InfloatApi.GetModelsProjectsProjectIdModelsGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ModelResponse[]> {
        const { authorization } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}/models`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getModelsProjectsProjectIdModelsGet.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {string} projectId
     * @param {InfloatApi.BodyUploadModelProjectsProjectIdModelsPost} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.uploadModelProjectsProjectIdModelsPost(fs.createReadStream("/path/to/your/file"), "project_id", {})
     */
    public async uploadModelProjectsProjectIdModelsPost(
        file: File | fs.ReadStream | Blob,
        projectId: string,
        request: InfloatApi.BodyUploadModelProjectsProjectIdModelsPost,
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ModelResponse> {
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (request.modelType != null) {
            _queryParams["model_type"] = request.modelType;
        }

        if (request.version != null) {
            _queryParams["version"] = request.version;
        }

        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}/models`
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: request.authorization != null ? request.authorization : undefined,
                ..._maybeEncodedRequest.headers,
            },
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ModelResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} projectId
     * @param {InfloatApi.GetClientsProjectsProjectIdClientsGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getClientsProjectsProjectIdClientsGet("project_id")
     */
    public async getClientsProjectsProjectIdClientsGet(
        projectId: string,
        request: InfloatApi.GetClientsProjectsProjectIdClientsGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ClientResponse[]> {
        const { authorization } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}/clients`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getClientsProjectsProjectIdClientsGet.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} projectId
     * @param {InfloatApi.RegisterClientProjectsProjectIdClientsPostRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.registerClientProjectsProjectIdClientsPost("project_id")
     */
    public async registerClientProjectsProjectIdClientsPost(
        projectId: string,
        request: InfloatApi.RegisterClientProjectsProjectIdClientsPostRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ClientResponse> {
        const { name, authorization } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (name != null) {
            _queryParams["name"] = name;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}/clients`
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ClientResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApi.GetClientConfigClientConfigGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getClientConfigClientConfigGet()
     */
    public async getClientConfigClientConfigGet(
        request: InfloatApi.GetClientConfigClientConfigGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.ClientConfig> {
        const { apiKey } = request;
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "client/config"),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "X-API-Key": apiKey != null ? apiKey : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ClientConfig.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} projectId
     * @param {InfloatApi.GetTrainingsProjectsProjectIdTrainingsGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getTrainingsProjectsProjectIdTrainingsGet("project_id")
     */
    public async getTrainingsProjectsProjectIdTrainingsGet(
        projectId: string,
        request: InfloatApi.GetTrainingsProjectsProjectIdTrainingsGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.TrainingStatus[]> {
        const { skip, limit, authorization } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}/trainings`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getTrainingsProjectsProjectIdTrainingsGet.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} projectId
     * @param {InfloatApi.TrainingCreate} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.startTrainingProjectsProjectIdTrainingsPost("project_id", {
     *         modelId: "model_id"
     *     })
     */
    public async startTrainingProjectsProjectIdTrainingsPost(
        projectId: string,
        request: InfloatApi.TrainingCreate,
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.TrainingStatus> {
        const { authorization, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `projects/${encodeURIComponent(projectId)}/trainings`
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TrainingCreate.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TrainingStatus.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} trainingId
     * @param {InfloatApi.GetTrainingStatusTrainingsTrainingIdGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getTrainingStatusTrainingsTrainingIdGet("training_id")
     */
    public async getTrainingStatusTrainingsTrainingIdGet(
        trainingId: string,
        request: InfloatApi.GetTrainingStatusTrainingsTrainingIdGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.TrainingStatus> {
        const { authorization } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `trainings/${encodeURIComponent(trainingId)}`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TrainingStatus.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} trainingId
     * @param {InfloatApi.GetTrainingResultsTrainingsTrainingIdResultsGetRequest} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.getTrainingResultsTrainingsTrainingIdResultsGet("training_id")
     */
    public async getTrainingResultsTrainingsTrainingIdResultsGet(
        trainingId: string,
        request: InfloatApi.GetTrainingResultsTrainingsTrainingIdResultsGetRequest = {},
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<InfloatApi.TrainingResultResponse[]> {
        const { roundNum, authorization } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (roundNum != null) {
            _queryParams["round_num"] = roundNum.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `trainings/${encodeURIComponent(trainingId)}/results`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                authorization: authorization != null ? authorization : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.getTrainingResultsTrainingsTrainingIdResultsGet.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApi.ClientMetrics} request
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link InfloatApi.UnprocessableEntityError}
     *
     * @example
     *     await client.submitMetricsClientSubmitMetricsPost({
     *         clientId: "client_id",
     *         round: 1,
     *         loss: 1.1,
     *         accuracy: 1.1,
     *         trainingSamples: 1,
     *         trainingTime: 1.1
     *     })
     */
    public async submitMetricsClientSubmitMetricsPost(
        request: InfloatApi.ClientMetrics,
        requestOptions?: InfloatApiClient.RequestOptions
    ): Promise<unknown> {
        const { apiKey, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "client/submit-metrics"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "X-API-Key": apiKey != null ? apiKey : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ClientMetrics.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new InfloatApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.InfloatApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {InfloatApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.healthCheckHealthGet()
     */
    public async healthCheckHealthGet(requestOptions?: InfloatApiClient.RequestOptions): Promise<unknown> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "health"),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "infloat-ts",
                "X-Fern-SDK-Version": "0.1.2",
                "User-Agent": "infloat-ts/0.1.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.InfloatApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.InfloatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.InfloatApiTimeoutError();
            case "unknown":
                throw new errors.InfloatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
