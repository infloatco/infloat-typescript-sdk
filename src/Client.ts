/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import { Auth } from "./api/resources/auth/client/Client";
import { Crawler } from "./api/resources/crawler/client/Client";
import { Chatbot } from "./api/resources/chatbot/client/Client";

export declare namespace InfloatApiClient {
    export interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class InfloatApiClient {
    protected _auth: Auth | undefined;
    protected _crawler: Crawler | undefined;
    protected _chatbot: Chatbot | undefined;

    constructor(protected readonly _options: InfloatApiClient.Options) {}

    public get auth(): Auth {
        return (this._auth ??= new Auth(this._options));
    }

    public get crawler(): Crawler {
        return (this._crawler ??= new Crawler(this._options));
    }

    public get chatbot(): Chatbot {
        return (this._chatbot ??= new Chatbot(this._options));
    }
}
