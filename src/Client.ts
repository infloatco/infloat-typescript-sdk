/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Auth } from "./api/resources/auth/client/Client";
import { Ingestion } from "./api/resources/ingestion/client/Client";
import { Chatbot } from "./api/resources/chatbot/client/Client";
import { Token } from "./api/resources/token/client/Client";

export declare namespace InfloatApiClient {
    interface Options {
        environment?: core.Supplier<environments.InfloatApiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class InfloatApiClient {
    constructor(protected readonly _options: InfloatApiClient.Options = {}) {}

    protected _auth: Auth | undefined;

    public get auth(): Auth {
        return (this._auth ??= new Auth(this._options));
    }

    protected _ingestion: Ingestion | undefined;

    public get ingestion(): Ingestion {
        return (this._ingestion ??= new Ingestion(this._options));
    }

    protected _chatbot: Chatbot | undefined;

    public get chatbot(): Chatbot {
        return (this._chatbot ??= new Chatbot(this._options));
    }

    protected _token: Token | undefined;

    public get token(): Token {
        return (this._token ??= new Token(this._options));
    }
}
